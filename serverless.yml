service: sfn-course
frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs18.x
  region: us-east-1
  iamRoleStatements:
    - Effect: Allow
      Action: dynamodb:*
      Resource: arn:aws:dynamodb:us-east-1:109418755717:table/bookTable
    - Effect: Allow
      Action: dynamodb:*
      Resource: arn:aws:dynamodb:us-east-1:109418755717:table/userTable
    - Effect: Allow
      Action: sns:*
      Resource: arn:aws:sns:us-east-1:109418755717:NotifyCourier
    - Effect: Allow
      Action: sqs:*
      Resource: arn:aws:sqs:us-east-1:109418755717:OrdersQueue
    - Effect: Allow
      Action: states:*
      Resource: arn:aws:states:us-east-1:109418755717:stateMachine:storeCheckoutFlow

plugins:
  - serverless-step-functions

functions:
  checkInventory: 
    handler: handler.checkInventory
    # iamRoleStatements:
    # - Effect: Allow
    #   Action: dynamodb:*
    #   Resource: arn:aws:dynamodb:us-east-1:109418755717:table/bookTable
  calculateTotal:
    handler: handler.calculateTotal
  
  redeemPoints:
    handler: handler.redeemPoints
    # iamRoleStatements:
    # - Effect: Allow
    #   Action: dynamodb:*
    #   Resource: arn:aws:dynamodb:us-east-1:109418755717:table/userTable
  billCustomer:
    handler: handler.billCustomer
  restoreRedeemPoints:
    handler: handler.restoreRedeemPoints
  restoreQuantity:
    handler: handler.restoreQuantity
  sqsWorker:
    handler: handler.sqsWorker
    events:
    - sqs:
        arn: arn:aws:sqs:us-east-1:109418755717:OrdersQueue
        batchSize: 1

stepFunctions:
  stateMachines:
    storeCheckoutFlow:
      name: storeCheckoutFlow
      definition: 
        StartAt: checkInventory
        States:
          checkInventory:
            Type: Task
            Resource:
              Fn::GetAtt: [checkInventory, Arn]
            Catch: 
              - ErrorEquals: [BookNotFound]
                Next: BookNotFoundError
              - ErrorEquals: [BookOutOfStock]
                Next: BookOutOfStockError
            ResultPath: "$.book"
            Next: calculateTotal
          calculateTotal:
            Type: Task
            Resource:
              Fn::GetAtt: [calculateTotal, Arn]
            ResultPath: "$.total"
            Next: isRedeemNeeded
          isRedeemNeeded:
            Type: Choice
            Choices:
              - Variable: $.redeem
                BooleanEquals: true
                Next: RedeemPoints
            Default: BillCustomer
          RedeemPoints:
            Type: Task
            Resource:
              Fn::GetAtt: [redeemPoints, Arn]
            ResultPath: "$.total"
            Catch:
              - ErrorEquals: [ States.ALL ]
                Next: RedeemPointsError
            Next: BillCustomer
          BillCustomer:
            Type: Task
            Resource:
              Fn::GetAtt: [billCustomer, Arn]
            ResultPath: "$.billingStatus"
            Retry:
              - ErrorEquals: [Status.ALL]
                MaxAttempts: 3
            Catch:
              - ErrorEquals: [Status.ALL]
                ResultPath: "$.customerBilling"
                Next: BillingError
            Next: PrepareOrder
            # End: true
          PrepareOrder:
            Type: Task
            Resource: arn:aws:states:::sqs:sendMessage.waitForTaskToken
            Parameters:
              QueueUrl: https://sqs.us-east-1.amazonaws.com/109418755717/OrdersQueue
              MessageBody:
                Input.$: "$" #the entire message object
                Token.$: "$$.Task.Token" # context of the obj machine
            ResultPath: "$.courierStatus"
            Catch:
              - ErrorEquals: [NoCourierAvailable]
                ResultPath: "$.courierError"
                Next: RefundCustomer
            Next: DispatchOrder
          RestoreQuantity:
            Type: Task
            Resource:
              Fn::GetAtt: [restoreQuantity, Arn]
            ResultPath: "$.quantityRestoreStatus"
            Next: RestoreRedeemPoints
          DispatchOrder:
            Type: Task
            Resource: arn:aws:states:::sns:publish
            Parameters:
              TopicArn: arn:aws:sns:us-east-1:109418755717:NotifyCourier
              Message.$: "$"
            Next: Dispatched
          Dispatched:
            Type: Pass
            Result: "Your order will be dispatched in 24 hours"
            End: true
          BookOutOfStockError:
            Type: Pass
            Result: "No such book available"
            End: true
          BookNotFoundError:
            Type: Pass
            Result: "Sorry, this book is out of stock"
            End: true
          RefundCustomer:
            Type: Pass
            Result: "Customer is refunded"
            ResultPath: "$.refundStatus"
            Next: RestoreQuantity
          RedeemPointsError:
            Type: Pass
            Result: "Error in redeem points"
            End: true
          BillingError:
            Type: Pass
            Result: "Billing Error"
            ResultPath: "$.billingStatus"
            Next: RestoreRedeemPoints
          RestoreRedeemPoints:
            Type: Task
            Resource: 
              Fn::GetAtt: [restoreRedeemPoints, Arn]
            End: true
